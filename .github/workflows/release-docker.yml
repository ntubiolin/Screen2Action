name: Build and Release (Docker)

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual trigger for testing

permissions:
  contents: write  # Required for creating releases
  packages: write  # Required for pushing Docker images

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}-base
  BUILD_IMAGE_NAME: ${{ github.repository }}-builder

jobs:
  # Build and cache the base image when dependencies change
  build-base-image:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      cache-hit: ${{ steps.cache-check.outputs.cache-hit }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Calculate dependency hash
      id: deps-hash
      run: |
        HASH=$(cat package.json package-lock.json backend/pyproject.toml backend/uv.lock 2>/dev/null | sha256sum | cut -d' ' -f1)
        echo "hash=${HASH:0:12}" >> $GITHUB_OUTPUT
    
    - name: Check Docker cache
      id: cache-check
      run: |
        if docker manifest inspect ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:deps-${{ steps.deps-hash.outputs.hash }} > /dev/null 2>&1; then
          echo "cache-hit=true" >> $GITHUB_OUTPUT
        else
          echo "cache-hit=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Docker Buildx
      if: steps.cache-check.outputs.cache-hit != 'true'
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: steps.cache-check.outputs.cache-hit != 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      if: steps.cache-check.outputs.cache-hit != 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
        tags: |
          type=raw,value=deps-${{ steps.deps-hash.outputs.hash }}
          type=raw,value=latest
    
    - name: Build and push base image
      if: steps.cache-check.outputs.cache-hit != 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.base
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Build releases using Docker
  build-releases:
    needs: build-base-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux, windows, mac]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Calculate dependency hash
      id: deps-hash
      run: |
        HASH=$(cat package.json package-lock.json backend/pyproject.toml backend/uv.lock 2>/dev/null | sha256sum | cut -d' ' -f1)
        echo "hash=${HASH:0:12}" >> $GITHUB_OUTPUT
    
    - name: Build release for ${{ matrix.platform }}
      run: |
        # Create output directory
        mkdir -p release-${{ matrix.platform }}
        
        # Build using Docker with base image
        docker run --rm \
          -v $(pwd):/workspace \
          -v $(pwd)/release-${{ matrix.platform }}:/output \
          -w /workspace \
          --platform linux/amd64 \
          ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:deps-${{ steps.deps-hash.outputs.hash }} \
          sh -c "
            # Install any additional platform-specific dependencies
            if [ '${{ matrix.platform }}' = 'windows' ]; then
              apt-get update && apt-get install -y wine wine64
            fi
            
            # Copy source files
            cp -r . /build
            cd /build
            
            # Build backend with PyInstaller
            cd backend
            uv sync --frozen
            uv run pyinstaller main.spec --distpath dist
            cd ..
            
            # Build frontend
            npm ci --no-audit --no-fund
            npm run build:renderer
            npm run build:electron
            
            # Build platform-specific release
            case '${{ matrix.platform }}' in
              linux)
                npm run dist -- --linux --publish=never
                ;;
              windows)
                npm run dist -- --win --publish=never
                ;;
              mac)
                npm run dist -- --mac --publish=never
                ;;
            esac
            
            # Copy artifacts to output
            cp -r release/* /output/ 2>/dev/null || true
            
            # Also copy the bundled backend
            cp -r backend/dist/screen2action-backend /output/backend 2>/dev/null || true
          "
    
    - name: List built artifacts
      run: |
        echo "Built artifacts for ${{ matrix.platform }}:"
        ls -la release-${{ matrix.platform }}/
    
    - name: Upload ${{ matrix.platform }} artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-release
        path: |
          release-${{ matrix.platform }}/*
          !release-${{ matrix.platform }}/backend
        if-no-files-found: error
    
    - name: Upload bundled backend for ${{ matrix.platform }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-backend
        path: release-${{ matrix.platform }}/backend
        if-no-files-found: warn

  # Create GitHub release
  release:
    needs: build-releases
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate Release Notes
      id: notes
      run: |
        cat > release-notes.md << 'EOF'
        # Screen2Action ${{ steps.version.outputs.VERSION }}
        
        ## 🐳 Built with Docker
        
        This release was built using our Docker-based build system, ensuring consistent builds across all platforms.
        
        ## 📦 Downloads
        
        ### macOS
        - **DMG**: For standard installation
        - **ZIP**: For portable use
        
        ### Windows  
        - **EXE**: NSIS installer for Windows
        
        ### Linux
        - **AppImage**: Portable application for Linux
        
        ## 📝 Installation Instructions
        
        ### macOS
        1. Download the DMG file
        2. Open the DMG and drag Screen2Action to Applications
        3. Right-click and select 'Open' for first-time launch (if security warning appears)
        
        ### Windows
        1. Download the EXE installer
        2. Run the installer and follow the prompts
        3. Launch Screen2Action from Start Menu or Desktop
        
        ### Linux
        1. Download the AppImage file
        2. Make it executable: `chmod +x Screen2Action-*.AppImage`
        3. Run the AppImage: `./Screen2Action-*.AppImage`
        
        ## 🚀 What's New
        
        - Docker-based build system for consistent cross-platform releases
        - PyInstaller backend bundling for better distribution
        - Improved build caching for faster CI/CD
        
        ## 📋 What's Changed
        
        See [full changelog](https://github.com/${{ github.repository }}/compare/.../${{ steps.version.outputs.VERSION }})
        EOF
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Screen2Action ${{ steps.version.outputs.VERSION }}
        body_path: release-notes.md
        draft: true  # Create as draft for review
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-beta') || contains(steps.version.outputs.VERSION, '-alpha') }}
        files: |
          release-artifacts/mac-release/*.dmg
          release-artifacts/mac-release/*.zip
          release-artifacts/linux-release/*.AppImage
          release-artifacts/windows-release/*.exe
        fail_on_unmatched_files: false
        generate_release_notes: true