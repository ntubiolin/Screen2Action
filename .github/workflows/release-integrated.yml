name: Release and Build

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ntubiolin/screen2action-base

jobs:
  # Step 1: Release Please creates PR and manages releases
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    
    steps:
      - name: Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  # Step 2: Build Docker base image when dependencies change
  build-base-image:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.deps-hash.outputs.hash }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Calculate dependency hash
      id: deps-hash
      run: |
        HASH=$(cat package.json package-lock.json backend/pyproject.toml backend/uv.lock 2>/dev/null | sha256sum | cut -d' ' -f1)
        echo "hash=deps-${HASH:0:12}" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push base image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.base
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ steps.deps-hash.outputs.hash }}
          ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Step 3: Build releases for all platforms
  build-releases:
    needs: [release-please, build-base-image]
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux, windows, mac]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build release for ${{ matrix.platform }}
      run: |
        mkdir -p release-${{ matrix.platform }}
        
        # Use the base image to build
        docker run --rm \
          -v $(pwd):/workspace \
          -v $(pwd)/release-${{ matrix.platform }}:/output \
          -w /workspace \
          --platform linux/amd64 \
          ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ needs.build-base-image.outputs.image-tag }} \
          sh -c "
            # Install platform-specific dependencies
            if [ '${{ matrix.platform }}' = 'windows' ]; then
              apt-get update && apt-get install -y wine wine64
            fi
            
            # Build backend with PyInstaller
            cd backend
            uv sync --frozen
            uv run pyinstaller main.spec --distpath dist
            cd ..
            
            # Build frontend
            npm ci --no-audit --no-fund
            npm run build:renderer
            npm run build:electron
            
            # Build platform-specific release
            case '${{ matrix.platform }}' in
              linux)
                npm run dist -- --linux --publish=never
                ;;
              windows)
                npm run dist -- --win --publish=never
                ;;
              mac)
                npm run dist -- --mac --publish=never
                ;;
            esac
            
            # Copy artifacts to output
            cp -r release/* /output/ 2>/dev/null || true
          "
    
    - name: List artifacts
      run: |
        echo "Built artifacts for ${{ matrix.platform }}:"
        ls -la release-${{ matrix.platform }}/
    
    - name: Upload release assets to GitHub Release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const platform = '${{ matrix.platform }}';
          const releaseDir = `release-${platform}`;
          const uploadUrl = '${{ needs.release-please.outputs.upload_url }}';
          
          // Define file patterns for each platform
          const filePatterns = {
            linux: ['.AppImage'],
            windows: ['.exe'],
            mac: ['.dmg', '.zip']
          };
          
          const patterns = filePatterns[platform] || [];
          const files = fs.readdirSync(releaseDir);
          
          for (const file of files) {
            if (patterns.some(pattern => file.endsWith(pattern))) {
              const filePath = path.join(releaseDir, file);
              const stats = fs.statSync(filePath);
              
              if (stats.isFile()) {
                console.log(`Uploading ${file}...`);
                
                const data = fs.readFileSync(filePath);
                
                await github.rest.repos.uploadReleaseAsset({
                  url: uploadUrl,
                  name: file,
                  data: data,
                  headers: {
                    'content-type': 'application/octet-stream',
                    'content-length': stats.size
                  }
                });
                
                console.log(`‚úÖ Uploaded ${file}`);
              }
            }
          }

  # Step 4: Update release notes with download links
  update-release:
    needs: [release-please, build-releases]
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Update Release Description
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const releaseId = '${{ needs.release-please.outputs.tag_name }}';
          
          // Get the release
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: releaseId
          });
          
          // Add installation instructions to the release body
          const additionalNotes = `
          
          ## üì¶ Installation Instructions
          
          ### macOS
          1. Download the \`.dmg\` file below
          2. Open the DMG and drag Screen2Action to Applications
          3. Right-click and select "Open" for first-time launch
          
          ### Windows
          1. Download the \`.exe\` installer below
          2. Run the installer and follow the prompts
          3. Launch Screen2Action from Start Menu or Desktop
          
          ### Linux
          1. Download the \`.AppImage\` file below
          2. Make it executable: \`chmod +x Screen2Action-*.AppImage\`
          3. Run: \`./Screen2Action-*.AppImage\`
          
          ## üê≥ Built with Docker
          
          This release was automatically built using our Docker-based CI/CD pipeline with:
          - PyInstaller backend bundling
          - Cached Docker base images
          - Parallel platform builds
          `;
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.id,
            body: release.body + additionalNotes
          });
          
          console.log('‚úÖ Release notes updated');