# Specialized Dockerfile for macOS builds
# Note: Building macOS apps in Docker requires special handling

FROM node:20-bullseye AS mac-builder

WORKDIR /build

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libgtk-3-0 \
    libnotify-dev \
    libgconf-2-4 \
    libnss3 \
    libxss1 \
    libasound2 \
    libxtst6 \
    xauth \
    xvfb \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install Python uv
RUN pip3 install uv

# Copy and install Node dependencies
COPY package*.json ./
COPY tsconfig*.json ./
COPY vite.config.ts ./
COPY tailwind.config.js ./
COPY postcss.config.js ./
COPY electron-builder.json ./
RUN npm ci

# Copy source code
COPY src ./src
COPY public ./public
COPY index.html ./
COPY assets ./assets
COPY resources ./resources
COPY build ./build

# Copy backend
COPY backend ./backend

# Build frontend
RUN npm run build:renderer && npm run build:electron

# Bundle backend
WORKDIR /build/backend
RUN uv sync --frozen

WORKDIR /build
RUN node scripts/bundle-backend.js || echo "Backend bundling skipped"

# Create dist-backend directory if bundle script didn't work
RUN mkdir -p dist-backend && cp -r backend/* dist-backend/ || true

# Build Electron app
# Note: Actually building for macOS requires macOS host or special signing tools
RUN npm run dist -- --mac --x64 --arm64 || \
    echo "Warning: macOS build may not be properly signed when built in Linux container"

# Output stage
FROM alpine:latest AS output

WORKDIR /output

COPY --from=mac-builder /build/release ./release

VOLUME ["/output/release"]

CMD ["sh", "-c", "cp -r /output/release/* /output/release/"]